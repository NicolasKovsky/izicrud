<script setup lang="ts">
import AppLayout from '@/layouts/AppLayout.vue';
import { type BreadcrumbItem } from '@/types';
import { Head } from '@inertiajs/vue3';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { ref, computed } from 'vue';
import { router } from '@inertiajs/vue3';

const breadcrumbs: BreadcrumbItem[] = [
    { title: '{{modelPluralTitle}}', href: '/{{routePrefix}}' },
];

const headerTitle = '{{modelPluralTitle}}';
const headerDescription = 'Gerencie seus {{modelPluralLower}} aqui.';

const props = defineProps<{
    itens: {
        data: { id: number; {{propFields}} }[];
        current_page: number;
        last_page: number;
        per_page: number;
        total: number;
    };
    allItens: { id: number; {{propFields}} }[];
    sidebarNavItems: { title: string; href: string }[];
}>();

const showAlertState = ref(false);
const searchQuery = ref('');
const alertMessage = ref('');
const alertVariant = ref<'success' | 'warning' | 'destructive'>('success');
const showDeleteDialog = ref(false);
const itemToDelete = ref<number | null>(null);

const sortColumn = ref<string | null>(null);
const sortDirection = ref<'asc' | 'desc'>('asc');

const filteredItens = computed(() => {
    const query = searchQuery.value.toLowerCase();
    return props.allItens.filter(item =>
        Object.values(item).some(value => (value || '').toString().toLowerCase().includes(query))
    );
});

const sortedItens = computed(() => {
    const itensCopy = [...filteredItens.value];
    if (!sortColumn.value) return itensCopy;

    return itensCopy.sort((a, b) => {
        const aValue = a[sortColumn.value as keyof typeof a] || '';
        const bValue = b[sortColumn.value as keyof typeof b] || '';
        if (sortDirection.value === 'asc') {
            return aValue > bValue ? 1 : -1;
        } else {
            return aValue < bValue ? 1 : -1;
        }
    });
});

const paginatedItens = computed(() => {
    const start = (props.itens.current_page - 1) * props.itens.per_page;
    const end = start + props.itens.per_page;
    return sortedItens.value.slice(start, end);
});

function toggleSort(column: string) {
    if (sortColumn.value === column) {
        sortDirection.value = sortDirection.value === 'asc' ? 'desc' : 'asc';
    } else {
        sortColumn.value = column;
        sortDirection.value = 'asc';
    }
}

function showAlert(message: string, variant: 'success' | 'warning' | 'destructive' = 'success'): void {
    alertMessage.value = message;
    alertVariant.value = variant;
    showAlertState.value = true;
    setTimeout(() => showAlertState.value = false, 3000);
}

function confirmDelete(itemId: number): void {
    itemToDelete.value = itemId;
    showDeleteDialog.value = true;
}

function deleteItem(): void {
    if (itemToDelete.value !== null) {
        router.delete(`/{{routePrefix}}/${itemToDelete.value}`, {
            onSuccess: () => {
                showAlert('{{modelTitle}} excluído com sucesso!', 'success');
                showDeleteDialog.value = false;
                itemToDelete.value = null;
            },
            onError: () => {
                showAlert('Erro ao excluir o {{modelLower}}.', 'destructive');
                showDeleteDialog.value = false;
            },
        });
    }
}

function goToPage(page: number) {
    router.get('/{{routePrefix}}', { page }, { preserveState: true, preserveScroll: true });
}

const currentPage = computed(() => props.itens.current_page);
const lastPage = computed(() => props.itens.last_page);
const canGoPrevious = computed(() => currentPage.value > 1);
const canGoNext = computed(() => currentPage.value < lastPage.value);
</script>

<template>
    <Head title="{{modelPluralTitle}}" />

    <AppLayout :breadcrumbs="breadcrumbs" :headerTitle="headerTitle" :headerDescription="headerDescription" :sidebarNavItems="props.sidebarNavItems">
        <div class="flex h-full flex-1 flex-col gap-4 rounded-xl p-4">
            <Alert v-if="showAlertState" class="mb-4" :class="{
                'bg-green-100 border-green-500 text-green-900': alertVariant === 'success',
                'bg-yellow-100 border-yellow-500 text-yellow-900': alertVariant === 'warning',
                'bg-red-100 border-red-500 text-red-900': alertVariant === 'destructive',
            }">
                <AlertTitle>Ação Realizada</AlertTitle>
                <AlertDescription>{{ alertMessage }}</AlertDescription>
            </Alert>

            <div class="relative min-h-[100vh] flex-1 rounded-xl border border-sidebar-border/70 dark:border-sidebar-border md:min-h-min">
                <div class="mb-4">
                    <input v-model="searchQuery" type="text" placeholder="Pesquisar {{modelPluralLower}}..." class="w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>

                <Table>
                    <TableHeader>
                        <TableRow>
                            {{tableHeaders}}
                            <TableHead class="w-1/6">Ações</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        <TableRow v-for="(item, index) in paginatedItens" :key="index">
                            {{tableCells}}
                            <TableCell>
                                <ul class="flex flex-row gap-4">
                                    <li>
                                        <Button variant="link" @click="router.visit(`/{{routePrefix}}/${item.id}/edit`)" class="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 ring-1 ring-blue-500/20">
                                            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 stroke-current">
                                                <path d="M9 5H7C5.89543 5 5 5.89543 5 7V19C5 20.1046 5.89543 21 7 21H9M15 5H17C18.1046 5 19 5.89543 19 7V9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                                                <path d="M14.902 20.3343L12.7153 20.7716L13.1526 18.585C13.1914 18.3914 13.2865 18.2136 13.4261 18.074L17.5 14L19.5 12L21.4869 13.9869L19.4869 15.9869L15.413 20.0608C15.2734 20.2004 15.0956 20.2956 14.902 20.3343Z" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                                                <path d="M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5V7H9V5Z" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                                            </svg>
                                            Editar
                                        </Button>
                                    </li>
                                    <li>
                                        <Button variant="link" class="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 ring-1 ring-red-500/20" @click="confirmDelete(item.id)">
                                            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 stroke-current">
                                                <path d="M10 12V17" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                                                <path d="M14 12V17" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                                                <path d="M4 7H20" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                                                <path d="M6 10V18C6 19.6569 7.34315 21 9 21H15C16.6569 21 18 19.6569 18 18V10" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                                                <path d="M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5V7H9V5Z" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                                            </svg>
                                            Excluir
                                        </Button>
                                    </li>
                                </ul>
                            </TableCell>
                        </TableRow>
                    </TableBody>
                </Table>

                <div class="flex items-center justify-between px-4 py-2">
                    <div>
                        <p class="text-sm text-gray-700">
                            Mostrando {{ filteredItens.length }} de {{ props.itens.total }} {{modelPluralLower}}
                        </p>
                    </div>
                    <div class="flex gap-2">
                        <Button :disabled="!canGoPrevious" @click="goToPage(currentPage - 1)" variant="outline">Anterior</Button>
                        <span class="flex items-center px-4">Página {{ currentPage }} de {{ lastPage }}</span>
                        <Button :disabled="!canGoNext" @click="goToPage(currentPage + 1)" variant="outline">Próximo</Button>
                    </div>
                </div>
            </div>

            <Dialog v-model:open="showDeleteDialog">
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Confirmar Exclusão</DialogTitle>
                        <DialogDescription>
                            Tem certeza de que deseja excluir este {{modelLower}}? Esta ação não pode ser desfeita.
                        </DialogDescription>
                    </DialogHeader>
                    <DialogFooter>
                        <Button variant="outline" @click="showDeleteDialog = false">Cancelar</Button>
                        <Button variant="destructive" @click="deleteItem">Excluir</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    </AppLayout>
</template>